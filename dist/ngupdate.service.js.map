{"version":3,"file":"ngupdate.service.js","sourceRoot":"","sources":["../src/ngupdate.service.ts"],"names":[],"mappings":"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","sourcesContent":["import * as exec from '@actions/exec';\nimport * as core from '@actions/core';\nimport { ExecOptions } from '@actions/exec/lib/interfaces';\nimport { Helpers } from './helpers';\n\nexport class PackageToUpdate {\n  constructor(public name: string, public oldVersion: string, public newVersion: string) { }\n}\nexport interface NgUpdateResult {\n  packages: PackageToUpdate[];\n  ngUpdateOutput: string;\n  ngUpdateErrorOutput?: string;\n}\n\nexport class NgUpdateService {\n\n  public static readonly NO_UPDATE_FOUND = 'We analyzed your package.json and everything seems to be in order. Good work!';\n  public static readonly UPDATE_FOUND = 'We analyzed your package.json, there are some packages to update:';\n\n  constructor(private projectPath: string) { }\n\n  public async runUpdate(): Promise<NgUpdateResult> {\n\n    let ngUpdateOutput = '';\n    let ngUpdateErrorOutput = '';\n\n    const ngUpdateOptions: ExecOptions = {\n      listeners: {\n        stdout: (data: Buffer) => ngUpdateOutput += data.toString(),\n        stderr: (data: Buffer) => ngUpdateErrorOutput = data.toString()\n      },\n      cwd: this.projectPath\n    };\n\n    const npmRegistry = core.getInput('npm-registry');\n    const ngUpdateArgs = npmRegistry ? [`registry=${npmRegistry}`] : [];\n\n    core.debug(`🤖 Ensuring NPM modules are installed under '${this.projectPath}'...`);\n    await Helpers.ensureNodeModules(this.projectPath, process.env.FORCE_INSTALL_NODE_MODULES === 'true');\n\n    core.debug(`🤖 Running initial 'ng update${ngUpdateArgs}'...`);\n    const ngExec = Helpers.getLocalNgExecPath(this.projectPath);\n    await exec.exec(`\"${ngExec}\"`, ['update', ...ngUpdateArgs], ngUpdateOptions);\n\n    if (ngUpdateOutput.indexOf(NgUpdateService.NO_UPDATE_FOUND) > 0) {\n      core.info('🤖 Congratulations 👏, you are already using the latest version of Angular!');\n      return { packages: [], ngUpdateOutput, ngUpdateErrorOutput };\n    } else if (ngUpdateOutput.indexOf(NgUpdateService.UPDATE_FOUND) > 0) {\n\n      const ngUpdateRegEx = /\\s+([@/a-zA-Z0-9]+)\\s+(\\d+\\.\\d+\\.\\d+)\\s+->\\s+(\\d+\\.\\d+\\.\\d+)\\s+ng update/gm;\n\n      const pkgsToUpdate: PackageToUpdate[] = [];\n      // tslint:disable-next-line: no-conditional-assignment\n      for (let match: RegExpExecArray | null; (match = ngUpdateRegEx.exec(ngUpdateOutput));) {\n        pkgsToUpdate.push(new PackageToUpdate(match[1], match[2], match[3]));\n      }\n\n      if (pkgsToUpdate.length) {\n        core.info(`🤖 Updating outdated ng dependencies: ${pkgsToUpdate.map(p => `'${p.name}'`)}...`);\n        const ngUpdatePkgsArgs = [...ngUpdateArgs, ...(pkgsToUpdate.map(p => p.name))];\n        const ngUpdatePkgsOptions: ExecOptions = {\n          cwd: this.projectPath\n        };\n        await exec.exec(`\"${ngExec}\"`, ['update', ...ngUpdatePkgsArgs], ngUpdatePkgsOptions);\n      }\n      return { packages: pkgsToUpdate, ngUpdateOutput, ngUpdateErrorOutput };\n    }\n\n    if (ngUpdateErrorOutput.length) {\n      core.warning('🤖 It looks like the \"ng update\" command failed.');\n      core.warning(ngUpdateErrorOutput);\n    }\n\n    return { packages: [], ngUpdateOutput, ngUpdateErrorOutput };\n  }\n\n}"]}