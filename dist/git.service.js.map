{"version":3,"file":"git.service.js","sourceRoot":"","sources":["../src/git.service.ts"],"names":[],"mappings":"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","sourcesContent":["import gitP, { SimpleGit } from 'simple-git/promise';\n\n\nexport class GitService {\n\n  private git: SimpleGit;\n\n  public constructor(private repoDir: string) {\n    this.git = gitP(repoDir);\n  }\n\n  public async clone(repoUrl: string, depth?: string): Promise<void> {\n    await this.git.clone(repoUrl, this.repoDir, { ...(depth && { '--depth': depth }) });\n  }\n\n  public async init(remoteUrl: string, authorName: string, authorEmail: string): Promise<void> {\n    await this.git.addConfig('user.name', authorName);\n    await this.git.addConfig('user.email', authorEmail);\n    await this.git.remote(['set-url', 'origin', remoteUrl]);\n  }\n\n\n  public async hasChanges(): Promise<boolean> {\n    const status = await this.git.status();\n    return !status.isClean();\n  }\n\n  public async remoteBranchExists(branch: string): Promise<boolean> {\n    const remotes = await this.git.branch(['-r']);\n    return remotes.all.includes(`origin/${branch}`);\n  }\n\n  public async checkoutBranch(branch: string): Promise<void> {\n    await this.git.checkout(branch);\n  }\n\n  public async cleanCheckoutBranch(branch: string, baseBranch: string, remoteExists: boolean): Promise<void> {\n    if (remoteExists) {\n      await this.git.stash(['--include-untracked']);\n      await this.git.checkout(branch);\n      await this.git.reset(['--hard', `origin/${baseBranch}`]);\n      try {\n        await this.git.stash(['pop']);\n      } catch (e) {\n        console.error(`error when unstashing: ${e.message}`);\n        await this.git.checkout(['--theirs', '.']);\n        await this.git.reset();\n      }\n    }\n    else {\n      await this.git.checkoutBranch(branch, `origin/${baseBranch}`);\n    }\n  }\n\n  public async raw(commands: string | string[]): Promise<string> {\n    return this.git.raw(commands);\n  }\n\n  public async shortenSha1(sha1: string): Promise<string> {\n    return this.git.revparse(['--short', sha1]);\n  }\n\n  public async commit(message: string): Promise<void> {\n    await this.git.add(\"./*\");\n    await this.git.commit(message);\n  }\n\n  public async push(branch: string, force?: boolean): Promise<void> {\n    await this.git.push('origin', branch, { '--set-upstream': null, ...(force && { '--force': null }) });\n  }\n}"]}