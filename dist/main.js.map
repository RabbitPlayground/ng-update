{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import * as core from '@actions/core';\nimport { context, getOctokit } from '@actions/github';\nimport * as path from 'path';\nimport { GithubService } from './github.service';\nimport { NgUpdateService } from './ngupdate.service';\nimport { GitService } from './git.service';\nimport { Helpers } from './helpers';\n\nvoid (async () => {\n  try {\n    const repo = `${context.repo.owner}/${context.repo.repo}`;\n    const repoToken = core.getInput('repo-token');\n    const baseBranch = core.getInput('base-branch');\n    const remoteUrl = `https://x-access-token:${repoToken}@github.com/${repo}`;\n    const repoDir = process.env.GITHUB_WORKSPACE || ''; // TODO: if empty, manually checkout project\n    const authorName = 'ng-update[bot]';\n    const authorEmail = 'ng-update@users.noreply.github.com';\n    const projectPath = path.normalize(path.join(repoDir, core.getInput('project-path')));\n    const nodeModulesPath = path.normalize(path.join(repoDir, core.getInput('node-modules-path') || core.getInput('project-path')));\n\n    const gbClient = getOctokit(repoToken);\n    const ngService = new NgUpdateService(projectPath, nodeModulesPath);\n    const gitService = new GitService(repoDir);\n    const gbService = new GithubService(gbClient, context);\n\n    core.info('🤖 Checking if received Github event should be ignored...');\n    if (gbService.shouldIgnoreEvent(baseBranch)) {\n      return;\n    }\n\n    if (Helpers.isFolderEmpty(repoDir)) {\n      const fetchDepth = core.getInput('fetch-depth');\n      core.info(`🤖 Repo directory at: '${repoDir}' is empty. Checking out from: '${remoteUrl}'...`);\n      await gitService.clone(remoteUrl, fetchDepth);\n    }\n\n    await core.group(`🤖 Initializing git config at: '${repoDir}'`, async () => {\n      await gitService.init(remoteUrl, authorName, authorEmail);\n    });\n\n    await core.group(`🤖 Moving git head to base branch: ${baseBranch}`, async () => {\n      await gitService.checkoutBranch(baseBranch);\n    });\n\n    const ngFilePath = path.join(projectPath, 'angular.json');\n    const isNgProject = await Helpers.isFileExists(ngFilePath);\n    if (!isNgProject) {\n      core.error(`🤖 Could not detect an Angular CLI project under \"${projectPath}\", exiting`);\n      return;\n    }\n\n    const prTitle = core.getInput('pr-title');\n    const prBranchPrefix = core.getInput('pr-branch-prefix');\n\n    await core.group('🤖 Prerequisites are done. Trying to \"ng update\" your code now...', async () => {\n      const ngUpdateResult = await ngService.runUpdate();\n\n      if (ngUpdateResult.packages.length > 0 && await gitService.hasChanges()) {\n        const prBody = Helpers.getPrBody(core.getInput('pr-body'), ngUpdateResult.ngUpdateOutput);\n        const prLabels = Helpers.getPrAssignees(core.getInput('pr-labels'));\n        const prAssignees = Helpers.getPrAssignees(core.getInput('pr-assignees'));\n        const prReviewers = Helpers.getPrReviewers(core.getInput('pr-reviewers'));\n\n        const ngUpdateSha1 = await gitService.shortenSha1(Helpers.computeSha1(ngUpdateResult));\n        const prBranch = `${prBranchPrefix.substring(0, prBranchPrefix.lastIndexOf('-'))}-${ngUpdateSha1}`;\n\n        core.info(`🤖 PR branch will be: ${prBranch}`);\n        const remotePrBranchExists = await gitService.remoteBranchExists(prBranch);\n\n        await core.group(`🤖 Moving git head to pr branch: ${prBranch}`, async () => {\n          await gitService.cleanCheckoutBranch(prBranch, baseBranch, remotePrBranchExists);\n        });\n\n        await core.group(`🤖 Committing changes to branch: ${prBranch}`, async () => {\n          await gitService.commit(prTitle);\n        });\n\n        await core.group(`🤖 Pushing changes to pr branch: ${prBranch}`, async () => {\n          await gitService.push(prBranch, remotePrBranchExists); // will updated existing pr\n        });\n\n        let prNumber = await gbService.getOpenPR(baseBranch, prBranch);\n\n        if (prNumber) {\n          core.info(`🤖 PR from branch '${prBranch}' to '${baseBranch}' already existed (#${prNumber}). It's been simply updated.`);\n        } else {\n          await core.group(`🤖 Creating PR from branch '${prBranch}' to '${baseBranch}'`, async () => {\n            prNumber = await gbService.createPR(baseBranch, prBranch, prTitle, prBody, prAssignees, prReviewers, prLabels);\n          });\n        }\n\n        if (prNumber) {\n          core.setOutput('pr-number', `'${prNumber}'`);\n        }\n      } else {\n        core.info('🤖 Running \"ng update\" has produced no change in your code, you must be up-to-date already 👏!');\n      }\n\n      core.setOutput('ng-update-result', JSON.stringify(ngUpdateResult.packages));\n    });\n\n    const deleteClosedPRBranches = core.getInput('delete-closed-pr-branches') === 'true';\n    if (deleteClosedPRBranches) {\n      await core.group('🤖 Deleting branches related to closed PRs created by this action...', async () => {\n        await gbService.deleteClosedPRsBranches(baseBranch, prTitle, prBranchPrefix);\n      });\n    }\n  } catch (ex: any) {\n    core.setFailed(ex.message);\n  }\n})();"]}