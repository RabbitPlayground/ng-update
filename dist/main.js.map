{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import * as core from '@actions/core';\nimport * as github from '@actions/github';\nimport * as path from 'path';\nimport { GithubService } from './github.service';\nimport { NgUpdateService } from './ngupdate.service';\nimport { GitService } from './git.service';\nimport { Helpers } from './helpers';\n\nasync function run() {\n  try {\n    const context = github.context;\n    const repo = `${context.repo.owner}/${context.repo.repo}`;\n    const repoToken = core.getInput('repo-token');\n    const baseBranch = core.getInput('base-branch');\n    const remoteUrl = `https://x-access-token:${repoToken}@github.com/${repo}`;\n    const repoDir = process.env.GITHUB_WORKSPACE || ''; // TODO: if empty, manually checkout project\n    const authorName = 'ng-update[bot]';\n    const authorEmail = `ng-update@users.noreply.github.com`;\n    const projectPath = path.normalize(path.join(repoDir, core.getInput('project-path')));\n\n    const gbClient = new github.GitHub(repoToken);\n    const ngService = new NgUpdateService(projectPath);\n    const gitService = new GitService(repoDir);\n    const gbService = new GithubService(gbClient, context);\n\n    core.info(`ü§ñ Checking if received Github event should be ignored...`);\n    if (gbService.shouldIgnoreEvent(baseBranch)) {\n      return;\n    }\n\n    if (Helpers.isFolderEmpty(repoDir)) {\n\n      const fetchDepth = core.getInput('fetch-depth');\n      core.info(`ü§ñ Repo directory at: '${repoDir}' is empty. Checking out from: '${remoteUrl}'...`);\n      await gitService.clone(remoteUrl, fetchDepth);\n    }\n\n    core.debug(`ü§ñ Intializing git config at: '${repoDir}'`);\n    await gitService.init(remoteUrl, authorName, authorEmail);\n\n    core.debug(`ü§ñ Moving git head to base branch: ${baseBranch}`);\n    await gitService.checkoutBranch(baseBranch);\n\n    const ngFilePath = path.join(projectPath, 'angular.json');\n    const isNgProject = await Helpers.isFileExists(ngFilePath);\n    if (!isNgProject) {\n      core.warning(`ü§ñ Could not detect an Angular CLI project under \"${projectPath}\", exiting`);\n      return;\n    }\n\n    core.info(`ü§ñ Prerequisites are done. Trying to 'ng update' your code now...`);\n    const ngUpdateResult = await ngService.runUpdate();\n\n    const prTitle = core.getInput('pr-title');\n    const prBranchPrefix = core.getInput('pr-branch-prefix');\n\n    if (gitService.hasChanges()) {\n      const prBody = Helpers.getPrBody(core.getInput('pr-body'), ngUpdateResult.ngUpdateOutput);\n      const prLabels = Helpers.getPrAssignees(core.getInput('pr-labels'));\n      const prAssignees = Helpers.getPrAssignees(core.getInput('pr-assignees'));\n      const prReviewers = Helpers.getPrReviewers(core.getInput('pr-reviewers'));\n\n      const ngUpdateSha1 = await gitService.shortenSha1(Helpers.computeSha1(ngUpdateResult));\n      const prBranch = `${prBranchPrefix.substring(0, prBranchPrefix.lastIndexOf('-'))}-${ngUpdateSha1}`;\n\n      core.debug(`ü§ñ PR branch will be : ${prBranch}`);\n      const remotePrBranchExists = await gitService.remoteBranchExists(prBranch);\n\n      core.debug(`ü§ñ Moving git head to pr branch: ${prBranch}`);\n      await gitService.cleanCheckoutBranch(prBranch, baseBranch, remotePrBranchExists);\n\n      core.debug(`ü§ñ Committing changes to branch: '${prBranch}'`);\n      await gitService.commit(prTitle);\n\n      core.debug(`ü§ñ Pushing changes to pr branch: '${prBranch}'`);\n      await gitService.push(prBranch, remotePrBranchExists); // will updated existing pr\n\n      core.debug(`ü§ñ Checking for existing open PR from '${prBranch}' to '${baseBranch}'...`);\n      let prNumber = await gbService.getOpenPR(baseBranch, prBranch);\n\n      if (prNumber) {\n        core.debug(`ü§ñ PR from branch '${prBranch}' to '${baseBranch}' already existed (#${prNumber}). It's been simply updated.`);\n      } else {\n        core.debug(`ü§ñ Creating PR from branch '${prBranch}' to '${baseBranch}'`);\n        prNumber = await gbService.createPR(baseBranch, prBranch, prTitle, prBody, prAssignees, prReviewers, prLabels);\n      }\n\n      if (prNumber)\n        core.setOutput('pr-number', `'${prNumber}'`);\n    }\n    else\n      core.info(`ü§ñ Running 'ng update' has produced no change in your code, you must be up-to-date already üëè!`);\n\n    const deleteClosedPRBranches = core.getInput('delete-closed-pr-branches') === 'true';\n    if (deleteClosedPRBranches) {\n      core.info(`ü§ñ Deleting branches related to closed PRs created by this action...`);\n      await gbService.deleteClosedPRsBranches(baseBranch, prBranchPrefix, prTitle);\n    }\n    core.setOutput('ng-update-result', JSON.stringify(ngUpdateResult.packages));\n  } catch (error) {\n    core.setFailed(error.message);\n  }\n}\n\n// tslint:disable-next-line: no-floating-promises\nrun();\n"]}