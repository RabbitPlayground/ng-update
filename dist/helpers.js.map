{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../src/helpers.ts"],"names":[],"mappings":";;AAAA,4DAAsC;AACtC,mDAA6B;AAC7B,+CAAyB;AACzB,4CAA4C;AAC5C,MAAM,IAAI,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACpC,qDAAiD;AAGjD,MAAa,OAAO;IAEX,MAAM,CAAC,OAAO,CAAC,MAAc;QAClC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;IAC/D,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,QAAgB;QAC/C,OAAO,gBAAM,CAAC,QAAQ,CAAC,CAAC;IAC1B,CAAC;IAEM,MAAM,CAAC,aAAa,CAAC,UAAkB;QAC5C,OAAO,EAAE,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,WAAmB,EAAE,KAAe;QACxE,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC,CAAC;YAC/E,MAAM,cAAc,GAAG,MAAM,gBAAM,CAAC,eAAe,CAAC,CAAC;YACrD,IAAI,cAAc;gBAChB,OAAO;SACV;QACD,MAAM,OAAO,GAAgB;YAC3B,GAAG,EAAE,WAAW;SACjB,CAAC;QAEF,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC;QAChF,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IAChG,CAAC;IAEM,MAAM,CAAC,kBAAkB,CAAC,OAAe;QAC9C,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;IAC5F,CAAC;IACM,MAAM,CAAC,SAAS,CAAC,IAAY,EAAE,cAAsB;QAC1D,OAAO,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;IAC3D,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,MAAe;QACvC,OAAO,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAEM,MAAM,CAAC,cAAc,CAAC,SAAkB;QAC7C,OAAO,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAEM,MAAM,CAAC,cAAc,CAAC,SAAkB;QAC7C,OAAO,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAEM,MAAM,CAAC,MAAM,CAAC,KAAc;QACjC,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC1C,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,GAAQ;QAChC,OAAO,IAAI,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;IACjE,CAAC;CAEF;AA7DD,0BA6DC","sourcesContent":["import * as exec from '@actions/exec';\nimport * as path from 'path';\nimport * as fs from 'fs';\n// tslint:disable-next-line: no-var-requires\nconst hash = require('object-hash');\nimport { exists } from '@actions/io/lib/io-util';\nimport { ExecOptions } from '@actions/exec/lib/interfaces';\n\nexport class Helpers {\n\n  public static timeout(millis: number) {\n    return new Promise((resolve) => setTimeout(resolve, millis));\n  }\n\n  public static async isFileExists(filePath: string): Promise<boolean> {\n    return exists(filePath);\n  }\n\n  public static isFolderEmpty(folderPath: string): boolean {\n    return fs.readdirSync(folderPath).length === 0;\n  }\n\n  /**\n   * Makes sure that the given project as a `node_modules` folder, installs it otherwise\n   * @param projectPath project path\n   * @param force if true, will always install node modules (via `npm ci`) no matter if one already exits\n   */\n  public static async ensureNodeModules(projectPath: string, force?: boolean): Promise<void> {\n    if (!force) {\n      const nodeModulesPath = path.normalize(path.join(projectPath, 'node_modules'));\n      const hasNodeModules = await exists(nodeModulesPath);\n      if (hasNodeModules)\n        return;\n    }\n    const options: ExecOptions = {\n      cwd: projectPath\n    };\n\n    const useYarn = await Helpers.isFileExists(path.join(projectPath, 'yarn.lock'));\n    await (useYarn ? exec.exec('yarn', ['install'], options) : exec.exec('npm', ['ci'], options));\n  }\n\n  public static getLocalNgExecPath(baseDir: string) {\n    return path.normalize(path.join(baseDir, 'node_modules', '@angular', 'cli', 'bin', 'ng'));\n  }\n  public static getPrBody(body: string, ngUpdateOutput: string) {\n    return body.replace('${ngUpdateOutput}', ngUpdateOutput);\n  }\n\n  public static getPrLabels(labels?: string): string[] {\n    return Helpers.toList(labels);\n  }\n\n  public static getPrAssignees(assignees?: string): string[] {\n    return Helpers.toList(assignees);\n  }\n\n  public static getPrReviewers(reviewers?: string): string[] {\n    return Helpers.toList(reviewers);\n  }\n\n  public static toList(value?: string): string[] {\n    return value ? value.split(/,\\s*/) : [];\n  }\n\n  public static computeSha1(obj: any): string {\n    return hash(obj, { algorithm: 'sha1', unorderedArrays: true });\n  }\n\n}\n\n"]}