{"version":3,"file":"github.service.js","sourceRoot":"","sources":["../src/github.service.ts"],"names":[],"mappings":"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","sourcesContent":["import * as core from '@actions/core';\nimport { GitHub } from '@actions/github';\nimport { Context } from '@actions/github/lib/context';\n\nexport class GithubService {\n\n  private owner: string;\n  private repo: string;\n  private repoPath: string;\n  constructor(private gbClient: GitHub, private context: Context) {\n    this.repoPath = `${context.repo.owner}/${context.repo.repo}`;\n    this.owner = context.repo.owner;\n    this.repo = context.repo.repo;\n  }\n\n  public shouldIgnoreEvent(baseBranch: string): boolean {\n    if (this.context.eventName === \"push\") {\n      if (this.context.ref !== `refs/heads/${baseBranch}`) {\n        core.debug(`🤖 Ignoring events not originating from base branch '${baseBranch}' (was '${this.context.ref}').`);\n        return true;\n      }\n      // Ignore push events on deleted branches\n      // The event we want to ignore occurs when a PR is created but the repository owner decides\n      // not to commit the changes. They close the PR and delete the branch. This creates a\n      // \"push\" event that we want to ignore, otherwise it will create another branch and PR on\n      // the same commit.\n      const deleted = this.context.payload.deleted;\n      if (deleted === 'true') {\n        core.debug('🤖 Ignoring delete branch event.');\n        return true;\n      }\n    }\n\n    return false;\n  }\n  public async getOpenPR(base: string, head: string): Promise<number | null> {\n\n    const res = await this.gbClient.pulls.list({\n      owner: this.owner,\n      repo: this.repo,\n      state: 'open',\n      base,\n      head\n    });\n\n    return res.data[0]?.number;\n  }\n\n  public async getClosedPRsBranches(base: string, title: string, branchSuffix: string): Promise<string[]> {\n\n    const res = await this.gbClient.pulls.list({\n      owner: this.owner,\n      repo: this.repo,\n      state: 'closed',\n      base\n    });\n\n    return res.data//\n      .filter(pr => !pr.locked)//\n      .filter(pr => !pr.merged_at)//\n      .filter(pr => pr.head.ref.indexOf(branchSuffix) > 0 || pr.title === title)//\n      .map(pr => pr.head.ref);\n  }\n\n  public async deleteClosedPRsBranches(base: string, title: string, branchSuffix: string): Promise<void> {\n    const branches = await this.getClosedPRsBranches(base, title, branchSuffix);\n    for (const branch of Object.keys(branches)) {\n      const res = await this.gbClient.git.deleteRef({\n        owner: this.owner,\n        repo: this.repo,\n        ref: branch\n      });\n      if (res.status === 204)\n        core.debug(`🤖 >> Branch '${branch}' has been deleted`);\n      else if (res.status !== 422) // 422 = branch already gone\n        core.warning(`🤖 >> Branch '${branch}' could not be deleted. Status was: ${res.status}`);\n    }\n  }\n\n\n\n  public async createPR(base: string, head: string, title: string, body: string, assignees: string[], reviewers: string[], labels: string[]): Promise<number | null> {\n    try {\n      const createdPR = await this.gbClient.pulls.create({\n        owner: this.owner,\n        repo: this.repo,\n        head,\n        base,\n        maintainer_can_modify: false,\n        title,\n        body\n      });\n\n      const prNumber = createdPR.data.number;\n\n      core.debug(`🤖 Created pull request [${this.repoPath}]#${prNumber}`);\n\n      await this.gbClient.issues.update({\n        owner: this.owner,\n        repo: this.repo,\n        issue_number: prNumber,\n        assignees,\n        labels,\n        body\n      });\n\n      await this.addReviewers(prNumber, reviewers);\n\n      core.debug(`🤖 Updated pull request [${this.repoPath}]#${prNumber}`);\n\n      return prNumber;\n    } catch (error) {\n      core.error(`🤖  Create PR on [${this.repoPath}] from ${head} failed`);\n      core.setFailed(error);\n      return null;\n    }\n  }\n\n  private async  addReviewers(prNumber: number, reviewers: string[]) {\n    if (!prNumber || !reviewers || reviewers.length === 0) return null;\n    return this.gbClient.pulls.createReviewRequest({\n      owner: this.owner,\n      repo: this.repo,\n      pull_number: prNumber,\n      reviewers\n    });\n  }\n\n}"]}